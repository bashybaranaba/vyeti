import Head from "next/head";
import { useState, useEffect } from "react";
import { styled, useTheme } from "@mui/material/styles";
import axios from "axios";
import Box from "@mui/material/Box";
import MuiDrawer from "@mui/material/Drawer";
import MuiAppBar from "@mui/material/AppBar";
import Toolbar from "@mui/material/Toolbar";
import List from "@mui/material/List";
import CssBaseline from "@mui/material/CssBaseline";
import Typography from "@mui/material/Typography";
import Divider from "@mui/material/Divider";
import IconButton from "@mui/material/IconButton";
import MenuIcon from "@mui/icons-material/Menu";
import ChevronLeftIcon from "@mui/icons-material/ChevronLeft";
import ChevronRightIcon from "@mui/icons-material/ChevronRight";
import ListItem from "@mui/material/ListItem";
import ListItemIcon from "@mui/material/ListItemIcon";
import ListItemText from "@mui/material/ListItemText";

import AccountBalanceIcon from "@mui/icons-material/AccountBalance";
import SchoolIcon from "@mui/icons-material/School";
import ClassIcon from "@mui/icons-material/Class";
import MailIcon from "@mui/icons-material/Mail";
import ArchiveIcon from "@mui/icons-material/Archive";

import CreateProgramme from "../../../components/programme/CreateProgramme";
import ProgrammeList from "../../../components/programme/ProgrammeList";

import jwt from "jsonwebtoken";
import ProviderProfile from "../../../components/provider/ProviderProfile";

const drawerWidth = 240;

const openedMixin = (theme) => ({
  width: drawerWidth,
  transition: theme.transitions.create("width", {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.enteringScreen,
  }),
  overflowX: "hidden",
});

const closedMixin = (theme) => ({
  transition: theme.transitions.create("width", {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  overflowX: "hidden",
  width: `calc(${theme.spacing(7)} + 1px)`,
  [theme.breakpoints.up("sm")]: {
    width: `calc(${theme.spacing(9)} + 1px)`,
  },
});

const DrawerHeader = styled("div")(({ theme }) => ({
  display: "flex",
  alignItems: "center",
  justifyContent: "flex-end",
  padding: theme.spacing(0, 1),
  // necessary for content to be below app bar
  ...theme.mixins.toolbar,
}));

const AppBar = styled(MuiAppBar, {
  shouldForwardProp: (prop) => prop !== "open",
})(({ theme, open }) => ({
  zIndex: theme.zIndex.drawer + 1,
  transition: theme.transitions.create(["width", "margin"], {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  ...(open && {
    marginLeft: drawerWidth,
    width: `calc(100% - ${drawerWidth}px)`,
    transition: theme.transitions.create(["width", "margin"], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
  }),
}));

const Drawer = styled(MuiDrawer, {
  shouldForwardProp: (prop) => prop !== "open",
})(({ theme, open }) => ({
  width: drawerWidth,
  flexShrink: 0,
  whiteSpace: "nowrap",
  boxSizing: "border-box",
  ...(open && {
    ...openedMixin(theme),
    "& .MuiDrawer-paper": openedMixin(theme),
  }),
  ...(!open && {
    ...closedMixin(theme),
    "& .MuiDrawer-paper": closedMixin(theme),
  }),
}));

const buttonsinfo = [
  { text: "Institution Profile", link: "/campaigns", value: 0 },
  { text: "Programmes", link: "/contacts", value: 1 },
  { text: "Archived Items", link: "/messages", value: 2 },
];

export default function ProviderDashboard({ provider, programmes }) {
  const theme = useTheme();
  const [open, setOpen] = useState(false);
  const [value, setValue] = useState(0);

  const handleDrawerOpen = () => {
    setOpen(true);
  };

  const handleDrawerClose = () => {
    setOpen(false);
  };

  const handleChangeValue = (event, newValue) => {
    setValue(newValue);
  };
  return (
    <div>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box sx={{ display: "flex" }}>
        <CssBaseline />
        <AppBar position="fixed" open={open}>
          <Toolbar>
            <IconButton
              color="inherit"
              aria-label="open drawer"
              onClick={handleDrawerOpen}
              edge="start"
              sx={{
                marginRight: "36px",
                ...(open && { display: "none" }),
              }}
            >
              <MenuIcon />
            </IconButton>
            <Typography variant="h6" noWrap component="div">
              Dashboard
            </Typography>
          </Toolbar>
        </AppBar>
        <Drawer variant="permanent" open={open}>
          <DrawerHeader>
            <IconButton onClick={handleDrawerClose}>
              {theme.direction === "rtl" ? (
                <ChevronRightIcon />
              ) : (
                <ChevronLeftIcon />
              )}
            </IconButton>
          </DrawerHeader>
          <Divider />
          <List>
            {buttonsinfo.map((info, index) => (
              <ListItem
                button
                onClick={(e) => handleChangeValue(e, info.value)}
                key={index}
              >
                <ListItemIcon>
                  {index === 0 ? (
                    <AccountBalanceIcon
                      color={index === value ? "primary" : "inherit"}
                    />
                  ) : index === 1 ? (
                    <SchoolIcon
                      color={index === value ? "primary" : "inherit"}
                    />
                  ) : index === 2 ? (
                    <ArchiveIcon
                      color={index === value ? "primary" : "inherit"}
                    />
                  ) : (
                    <ClassIcon
                      color={index === value ? "primary" : "inherit"}
                    />
                  )}
                </ListItemIcon>
                <ListItemText primary={info.text} />
              </ListItem>
            ))}
          </List>
        </Drawer>

        <Box component="main" sx={{ flexGrow: 1, p: 3 }}>
          <DrawerHeader />
          <div hidden={value !== 0}>
            <ProviderProfile provider={provider} />
          </div>
          <div hidden={value !== 1}>
            <CreateProgramme providerId={provider._id} />
            <ProgrammeList programmes={programmes} />
          </div>
          <div hidden={value !== 2}>Archived Items</div>
          <div hidden={value !== 3}>Sth</div>
          <div hidden={value !== 4}>Archived</div>
        </Box>
      </Box>
    </div>
  );
}

export const getServerSideProps = async ({ req }) => {
  const { cookies } = req;
  const token = cookies.vyeti_jwt;
  const decoded_token = jwt.decode(token);
  const account_id = decoded_token.id;
  if (decoded_token.type === "employer") {
    return {
      redirect: {
        destination: "/dashboard/employer",
        permanent: false,
      },
    };
  } else if (decoded_token.type === "earner") {
    return {
      redirect: {
        destination: "/dashboard/earner",
        permanent: false,
      },
    };
  } else {
    const account = await axios.get(
      `http://localhost:3000/api/providers/account/${account_id}`
    );
    const providerId = account.data.provider._id;

    const res = await axios.get(
      `http://localhost:3000/api/providers/${providerId}`
    );
    return {
      props: {
        provider: res.data.provider,
        programmes: res.data.programmes,
      },
    };
  }
};
