import Head from "next/head";
import { useState } from "react";
import { useTheme } from "@mui/material/styles";
import axios from "axios";
import Box from "@mui/material/Box";
import Tabs from "@mui/material/Tabs";
import Tab from "@mui/material/Tab";
import TabPanel from "../../../components/util/TabPanel";
import Toolbar from "@mui/material/Toolbar";
import List from "@mui/material/List";
import CssBaseline from "@mui/material/CssBaseline";
import Typography from "@mui/material/Typography";
import Divider from "@mui/material/Divider";
import IconButton from "@mui/material/IconButton";
import MenuIcon from "@mui/icons-material/Menu";
import ChevronLeftIcon from "@mui/icons-material/ChevronLeft";
import ChevronRightIcon from "@mui/icons-material/ChevronRight";
import ListItem from "@mui/material/ListItem";
import ListItemIcon from "@mui/material/ListItemIcon";
import ListItemText from "@mui/material/ListItemText";
import Container from "@mui/material/Container";

import ApartmentIcon from "@mui/icons-material/Apartment";
import ClassIcon from "@mui/icons-material/Class";
import ArchiveIcon from "@mui/icons-material/Archive";
import AppRegistrationIcon from "@mui/icons-material/AppRegistration";

import EmployerProfile from "../../../components/employer/EmployerProfile";
import DataTable from "../../../components/registry/DataTable";
import Navbar from "../../../components/layout/Navbar";

import jwt from "jsonwebtoken";

function a11yProps(index) {
  return {
    id: `simple-tab-${index}`,
    "aria-controls": `simple-tabpanel-${index}`,
  };
}

export default function EmloyerDashboard({ employer, credentials }) {
  const [value, setValue] = useState(0);

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  const handleDrawerOpen = () => {
    setOpen(true);
  };

  return (
    <div>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <Container>
        <Box
          sx={{ borderBottom: 1, borderColor: "divider", ml: 3, mr: 3, mt: 3 }}
        >
          <Tabs
            value={value}
            onChange={handleChange}
            aria-label="basic tabs example"
            centered
            textColor="secondary"
            indicatorColor="secondary"
          >
            <Tab label="Profile Details" {...a11yProps(0)} sx={{ ml: 2 }} />
            <Tab
              label="Credentials Registry"
              {...a11yProps(1)}
              sx={{ ml: 2 }}
            />
            <Tab label="Individual Reports" {...a11yProps(2)} sx={{ ml: 2 }} />
          </Tabs>
        </Box>
      </Container>
      <TabPanel value={value} index={0}>
        <Box sx={{ m: 2 }}>
          <EmployerProfile employer={employer} />
        </Box>
      </TabPanel>
      <TabPanel value={value} index={1}>
        <Container maxWidth="lg">
          <Box sx={{ mr: 2, ml: 2 }}>
            <DataTable credentials={credentials} />
          </Box>
        </Container>
      </TabPanel>
      <TabPanel value={value} index={2}>
        <Container maxWidth="lg">
          <Container align="center" sx={{ mr: 2, ml: 2 }}>
            <Typography variant="subtitle1" color="text.secondary">
              Search for Individual and Get Report on Their Qualification
            </Typography>
          </Container>
        </Container>
      </TabPanel>
    </div>
  );
}

export const getServerSideProps = async ({ req }) => {
  const { cookies } = req;
  const token = cookies.vyeti_jwt;
  const decoded_token = jwt.decode(token);
  const account_id = decoded_token.id;
  const verified = decoded_token.verified;

  if (!verified) {
    return {
      redirect: {
        destination: "/verifyaccount",
        permanent: false,
      },
    };
  }

  if (decoded_token.type === "provider") {
    return {
      redirect: {
        destination: "/dashboard/provider",
        permanent: false,
      },
    };
  } else if (decoded_token.type === "earner") {
    return {
      redirect: {
        destination: "/dashboard/earner",
        permanent: false,
      },
    };
  } else {
    const account = await axios.get(
      `http://localhost:3000/api/accounts/employers/${account_id}`
    );
    const employerId = account.data.employer._id;

    const res = await axios.get(
      `http://localhost:3000/api/employers/${employerId}`
    );
    const credentials = await axios.get(
      `http://localhost:3000/api/credentials`
    );

    return {
      props: {
        employer: res.data.employer,
        credentials: credentials.data.credentials,
      },
    };
  }
};
